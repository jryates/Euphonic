#!groovy

def getGitCommitAuthorEmail() {
    withCredentials([string(credentialsId: 'GitHub_API_Token',
            variable: 'api_token')]) {
        return sh(
            script: """
                commit_url="\$(\\
                    curl -s -H "Authorization: token ${api_token}" \\
                    --request GET https://api.github.com/repos/pace-neutrons/Euphonic/git/ref/heads/${env.JOB_BASE_NAME} \\
                    | jq ".object.url" | tr -d '"'\\
                )" &&
                echo "\$(\\
                    curl -s -H "Authorization: token ${api_token}" \\
                    --request GET \$commit_url |  jq '.author.email' | tr -d '"'\\
                )"
            """,
            returnStdout: true
        )
    }
}

pipeline {
    
    agent { label "PACE macOS" }

    triggers {
        GenericTrigger(
             genericVariables: [
                [key: 'ref', value: '$.ref']
             ],

             causeString: 'Triggered on $ref',

             token: 'GitHub_API_Token',

             printContributedVariables: true,
             printPostContent: true,

             silentResponse: false,

             regexpFilterText: '$ref',
             regexpFilterExpression: 'refs/head/' + env.JOB_BASE_NAME
        )
        pollSCM('')
    }

    stages {

        stage("Notify") {
            steps {
                checkout scm
                echo "Branch: ${env.JOB_BASE_NAME}"
            }
        }

        stage("Setup") {
            steps {
                sh """
                    export PATH=\$PATH:~/opt/anaconda3/bin
                    eval "\$(conda shell.bash hook)"
                    conda create --name py python=3.7.7 -y
                    conda activate py
                    python -m pip install --upgrade --user pip
                    python -m pip install -r tests_and_analysis/jenkins_requirements.txt
                """
            }
        }

        stage("Test") {
            steps {
                sh """
                    eval "\$(conda shell.bash hook)"
                    conda activate py
                    python -m tox
                """
            }
        }

        stage("PyPI Release Testing") {
            when { tag "*" }
            steps {
                script {
                    def tag = env.JOB_BASE_NAME.substring(1)
                    sh """
                        rm -rf .tox
                        eval "\$(conda shell.bash hook)"
                        conda activate py
                        export EUPHONIC_VERSION="$tag"
                        python -m tox -c release_tox.ini
                    """
                }
            }
        }
    }

    post {

        always {
            junit 'tests_and_analysis/test/reports/junit_report*.xml'
        }

        unsuccessful {
            script {
                def email = getGitCommitAuthorEmail()
                mail (
                    to: "$email",
                    subject: "Mac failed pipeline: ${env.JOB_BASE_NAME}",
                    body: "See ${env.BUILD_URL}"
                )
            }
        }

        cleanup {
            deleteDir()
        }

    }
}
